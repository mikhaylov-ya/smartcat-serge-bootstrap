---

name: Operators
theory: |
  Before we move on, let's grasp the basic terminology. Operation signs such as `+` are called **operators**. They perform operations on certain values (**operands**). Operators are usually represented by one or more symbols, less often by a word. Most of the operators are identical to those from arithmetics.

  ```javascript
  console.log(8 + 2);
  ```
  Here `+` is an addition **operator**,  `8` and `2` are **operands**. 

  Addition operation has two operands, left and right of the operator `+`. Operations with two operands are called **binary**. If at least one operand is missing, for example, `3 + ;` then the program will throw a syntax error.

  Besides binary operations (not operators) there are unary operations (with one operand) and even ternary (with three operands)! Moreover, operators may look the same but denote different operations.

   ```javascript
    console.log(-3); // => -3
    ```
  In the example above the unary operation applies to `3`. An interpreter reads it as follows: the minus operator tells him to take the number `3` and find the opposite, which is `-3`.

  You might be a bit confused since `-3` is both a number and an operator with an operand, but that's how programming languages work.

instructions: |
  Write a program that calculates and prints the difference between `6` and `-81`.

tips: 
  - |
    [JavaScript operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators)

definitions:
  - name: "Arithmetic operations"
    description: "are addition, subtraction, multiplication and division."
  - name: "Unary operation"
    description: "is an operation with only one operand. For example, `-3` is an unary operation to get the number opposite to the number 3."
  - name: "Binary operation"
    description: "is an operation involving two operands. For example, `3 + 9`."
